{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "toc-hr-collapsed": false
   },
   "source": [
    "$$\n",
    "\\def\\I{{\\rm i}}\n",
    "\\def\\qqqquad{\\qquad\\qquad}\n",
    "\\def\\qfor{\\qquad\\hbox{for}\\qquad}\n",
    "\\def\\qwhere{\\qquad\\hbox{where}\\qquad}\n",
    "\\def\\ale#1{\\begin{align}#1\\end{align}}\n",
    "\\def\\em{\\epsilon_m}\n",
    "\\def\\unit#1{{\\rm #1}}\n",
    "\\def\\com#1{\\color{blue}{\\textrm{#1}}} \n",
    "$$\n",
    "\n",
    "# Lab1: Intro to Julia\n",
    "\n",
    "In this lab you will gain familiarity with using Julia and the Jupyter notebook environment. \n",
    "\n",
    "This laboratory assignment is divided into two parts. \n",
    "\n",
    "**Time management is important in 365 labs. \n",
    "Have a solid attempt yourself. If you get stuck, be bold about requesting help. You should aim to move on to part 2 by ~ 2.30pm**."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Instructions for submitting lab assignments\n",
    "- Submit your lab by ___copying___ this notebook with your answers into `dropbox` on `pleiades` (phsi365 Desktop link > dropbox ). \n",
    "\n",
    "- __Rename your notebook to__ `Lab1_userID.ipynb` before submitting it by dragging it onto the dropbox folder. For example, if your login name is `365joe`, make the notebook called `Lab1_joe.ipynb`. \n",
    "- You can confirm submission (and resubmit up to the deadline), by repeating the process. If you are asked whether to replace the file, this confirms it has been successfully submitted to the dropbox. __Please confirm your submission__.\n",
    "\n",
    "- __Due:__ 1pm Wednesday 4th March.\n",
    "\n",
    "$\\com{Grading comments will appear like this}$\n",
    "\n",
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "toc-hr-collapsed": false
   },
   "source": [
    "# Part 1: Julia and Jupyter notebooks\n",
    "\n",
    "In part 1 we want you to get a feel for how do do some basic calculations in julia. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Jupyter\n",
    "\n",
    "- Follow the steps in the notebook and answer the questions by adding new cells below. A simple way to label them is to put a comment in the cell, e.g. # a) . \n",
    "    - To execute the code in the current cell, hit two keys together: `shift+enter`. \n",
    "    - You can write comments (including latex) in markdown by first creating a cell, then typing the sequence `esc-m` to switch to \"markdown mode\" (or use the toolbar). \n",
    "    - To switch the cell back to code mode, type `esc-y`. \n",
    "    - Other useful commands are `esc-a` (make cell above), `esc-b` (below), and `esc-dd` (delete current cell).\n",
    "\n",
    "- To see all keyboard shortcuts, click on the palette button on the left border of the browser window (above the spanner). \n",
    "\n",
    "- Make sure you understand why `Julia` does what it does. \n",
    "\n",
    "Type the following commands (I will neglect the cell numbers) one-by-one into separate cells, and hit `shift+enter` to evaluate each cell. Check that you receive the same result:\n",
    "```julia\n",
    "In : 1\n",
    "Out: 1\n",
    "```\n",
    "```julia\n",
    "In : 1+1\n",
    "Out: 2\n",
    "```\n",
    "```julia\n",
    "In : 1+\n",
    "Out: syntax: incomplete: premature end of input\n",
    "```\n",
    "```julia\n",
    "In : ans\n",
    "Out: 2\n",
    "```\n",
    "```julia \n",
    "In : x=3\n",
    "Out: 3\n",
    "```\n",
    "Based on the first two inputs we may conclude that `Julia` can be used like any calculator. The second to last input shows that if no variable is assigned, it assigns the value of the calculation to `ans`. However, the third input produces an error message, telling us that our command was not a valid input that `Julia` could interpret. `Julia` tells us that the command ended prematurely, which is not suprising since addition is a binary operator and requires two arguments that are added together. \n",
    "\n",
    "As a matter of convenience, we can also see a summary of all defined variables, functions, and modules in the current julia session using the command `varinfo()`\n",
    "    \n",
    "Similarly to what we have just done above, type each command in a separate cell below. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# In: 1\n",
    "1\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# In: 1+1\n",
    "1+1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# In: 1+\n",
    "1+"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# In: ans\n",
    "ans"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# In: x = 3\n",
    "x = 3\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "varinfo()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Julia"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "1) Give a short answer to each question by adding new cells below.\n",
    "\n",
    "```julia\n",
    "a) cos(1) # does Julia use radians or degrees for trig functions?\n",
    "b) ?cos # how many related functions does Julia suggest?\n",
    "c) [1 2 3 4] # is there any difference between [1 2 3 4] and [1,2,3,4]?\n",
    "d) a = 1 # Julia confirms this command by returning the result. How do you suppress the output? (only needed for the last command in a sequence).\n",
    "e) b = [10 11 23 44]; b[3] # how do you pull out the last element of a vector?\n",
    "f) 5:9 # what does the : (colon) operator do?\n",
    "g) M = randn(4,3) # how can you create a random matrix of size 6980x314?\n",
    "h) x=3; # can you write more than one command in a single line? If \"yes\", how?\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [],
   "source": [
    "#=\n",
    "a) Julia uses radians for trig functions\n",
    "b) Julia suggests 12 related functions\n",
    "c) Yes. [1 2 3 4] is of type Array{Int64. 2} and [1, 2, 3, 4] is of type Array{Int64, 1}\n",
    "d) Use a semicolon\n",
    "e) To pull the last element of a vector use b[end]\n",
    "f) The colon gives the number 5 a label of 9\n",
    "g) Use randn(6980, 314) to create a random matrix of size 6980x314\n",
    "h) You can write more than one command in a single line using begin blocks and (;) chains\n",
    "=#"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "$\\com{f) colon creates a range object, indexing by 1 from 5 to 9}$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "2) Answer each question using text in a separate cell below each command.\n",
    "\n",
    "```julia\n",
    "a) v=1:4; u = collect(v) # how can we make a column vector [1 2 ... 1000000]^T ?\n",
    "b) w = transpose(v); w = v' # how can we transpose a matrix?\n",
    "c) x = rand(3,3)+im*rand(3,3); transpose(x); x' # what is the difference between transpose and '?\n",
    "d) M = rand(5,5); A=M[2:4,1:3] # what does this command do? \n",
    "e) b = collect(1:12); B=reshape(b,3,4) # what does the second argument of reshape stand for? If you are unsure, use ?\n",
    "```\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#=\n",
    "a) To make a row vector with 10^ elements use v=1:10^6; u = collect(transpose(v);\n",
    "b) Use transpose()\n",
    "c) Transpose flips the elements of the matrix by the diagonal and ' gives the adjoint of the matrix which is the conjugate transpose of the matrix\n",
    "d) M[2:4, 1:3] Takes rows 2 to 4 and column 1 to 3 of M\n",
    "e) reshape(b, 3, 4) returns a 3x4 matrix with the same number of elements. \n",
    "   For example a vector of [1 2 3 4 5 6] would return a matrix [1 2 3; 4 5 6] when using reshape to construct a 2x3 matrix.\n",
    "=#"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "3) Choose \"Kernel\"; \"Restart Kernel and Clear All Outputs\" from the menu above. Enter each command below in a separate cell, evaluate it, and then answer the questions below\n",
    "```julia\n",
    "A = [1 1; -2 6]\n",
    "B = [3 -5;7 2]\n",
    "C = [1 2 3; 2 4 6; 10 11 12]\n",
    "1+A; 1.+A; 1 .+A\n",
    "one(A)+A\n",
    "A+B\n",
    "A-B\n",
    "A*B\n",
    "A.*B\n",
    "@. A*B\n",
    "A/B\n",
    "A./B\n",
    "A^2\n",
    "A.^2\n",
    "A.^B\n",
    "3 .^A; 3.0 .^A\n",
    "A+C\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "a) What does the second `2` in `2:2:6` mean?\n",
    "\n",
    "b) What is the difference between `*` and `.*`? How about `^` and `.^`?\n",
    "\n",
    "c) What does each element of `A.^B` give in `julia`?\n",
    "\n",
    "d) What is the result of `A+C`? Why?\n",
    "\n",
    "e) Find in the help system what the operator `/` does; give a short explanation.\n",
    "\n",
    "f) Could you exponentiate `A` to `B`, i.e. `A^B`, or just element-wise? If \"no\", then what if the error message? If \"yes\", what is the result?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [],
   "source": [
    "#=\n",
    "a) The second 2 in 2:2:6 represents the step to increase by.\n",
    "b) * Multiplies scalars, .* multiplies each element in a vector with a scalar. ^ raises a scalar to a power, .^ raises each element in the matrix to a power.\n",
    "c) Each element of the matrix A is raised to the power of the corresponding element in B\n",
    "d) An error is reported when trying to evaluate A+C as the dimensions must match. A is a 2x2 array while C is a 3x3 array so addition is not possible\n",
    "e) The / operator is the right division operator. It multiplies x by the inverse of y on the right. It returns a floating-point number\n",
    "f) No you cannot exponentiate A to B, just element wise. The error message is that there is no method matching ^ for two arrays.\n",
    "=#"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "$\\com{Part 1: 5/5 awesome}$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "toc-hr-collapsed": false
   },
   "source": [
    "# Part 2: Functions and vectorizing\n",
    "This second part of the lab contains 2 problems which you should solve and discuss in this `Jupyter` notebook. The aim of this part of the lab is understand the value of putting hard-working code inside functions and calling the function. You will also learn about broadcasting, and timing code."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We have seen in lectures that a function can be defined as simply as `f(x)=x^2`. For more complicated functions, the general way to define a function in `julia` is, e.g:\n",
    "\n",
    "```julia \n",
    "function f(x)\n",
    "    a = cos(x)\n",
    "    b = 3\n",
    "    return a,b\n",
    "end\n",
    "```\n",
    "and in this case, would be called for `x=3` with the command `a,b=f(3)`, assigning two numbers to variables `a`, `b` _outside the function_. Let's start working with julia functions."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## To vectorize or not to vectorize?\n",
    "\n",
    "A common strategy in technical computing is to ___vectorize___ your code. This refers to the process of expressing your problem in terms of vectors or matrices and (hopefully) sparse matrices acting on them. This allows high level languages like Matlab to call efficient compiled C-libraries for linear algebra. In many languages (Matlab for example) vectorizing is essential because `for` loops are slow. \n",
    "\n",
    "Let's find out how what julia has to say about this by investigating a simple example in detail. \n",
    "\n",
    "We will need to know how to time code in julia. You can use the macro `@time` to time any expression, e.g.\n",
    "\n",
    "```julia\n",
    "@time f(x)\n",
    "```\n",
    "\n",
    "will give the evaluation time for `f(x)` with that value of `x`. \n",
    "\n",
    "A longer expression can be timed by using a `begin-end` block:\n",
    "\n",
    "```julia\n",
    "@time begin\n",
    "...\n",
    "end\n",
    "```\n",
    "\n",
    "Let's say we want to calculate the sum of the reciprocals of the first ten thousand cubes, i.e. \n",
    "\n",
    "$$s = 1^{-3}+2^{-3}+3^{-3}+\\dots +10000^{-3},$$\n",
    "\n",
    "an approximation to $\\zeta(3)$, where the [Riemann-zeta function](https://en.wikipedia.org/wiki/Riemann_zeta_function)\n",
    "\n",
    "$$\\boxed{\\quad\\zeta(z)=\\sum_{k=1}^\\infty\\frac{1}{k^z}\\quad}$$\n",
    "\n",
    "is an important function in several branches of Physics. \n",
    "\n",
    "Determine $s$ using `julia` in three different ways.\n",
    "\n",
    "(a) Use a [for loop](https://docs.julialang.org/en/v1/manual/control-flow/#man-loops-1). You will need to initialize the sum outside the loop (`s=0.0`), and then to modify `s` inside the loop, use  `global s = ...`. This is a slight peculiarity of julia loops that it is good to be aware of. Notice also that the statement \n",
    "```julia\n",
    "s=0.0\n",
    "```\n",
    "given directly to julia defines a global variable: ___all variables outside function definitions are global___. This also means they can often lead to slower code (harder for the compiler to reason about). Hence an important lesson in julia is: if speed matters to you always use functions. This is also good practice because ___it makes your code more reusable.___\n",
    "\n",
    "Time this code. \n",
    "\n",
    "(b) Put your for loop inside a [function](https://docs.julialang.org/en/v1/manual/functions/#) `mysum1()`. Time this. __Note:__ the first time you call a function, the compiler does some extra work. So the true timing we are interested in is for any call _after_ the first one where it is defined (redefinitions count as definitions too!).\n",
    "\n",
    "(c) Use only a single-line __vectorised__ `julia` expression to calculate $s$ (no function wrapper). If you haven't done this before, the strategy is to define a vector `n=[1 2 3 ... 10000]` (you can do this with a range object `1:10000`, even though it looks a bit different to a vector, it still behaves like one in most circumstances). Then perform local (dot) operations to achieve the result. You should be able to get this down to one very short expression that easily fits on one line. Time it.\n",
    "\n",
    "(d) Wrap your single-line expression in a function `mysum2()` and time this. \n",
    "\n",
    "(e) Use the package [BenchmarkTools](https://github.com/JuliaCI/BenchmarkTools.jl), and the macro `@btime` to compare more accurate timings for (b),(c),(d) (`@btime` averages over multiple calls, so the garbage collection is triggered. This is a more honest realistic time). What can you conclude about the speed of vectorizing (writing in terms of array operations), as compared with writing a `for` loop? Would you recommend vectorizing code in julia? Why? "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.202056898160098"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#=\n",
    "(a) Using a for loop\n",
    "=#\n",
    "s = 0.0\n",
    "for i = 1: 10^4\n",
    "    global s += i^(-3)\n",
    "end\n",
    "s"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  0.018035 seconds (19.11 k allocations: 1.004 MiB)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "1.202056898160098"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#= \n",
    "(b) Determine sum of the reciprocals of the first ten thousand cubes using a for loop inside a function\n",
    "=#\n",
    "function sumCubes(n)\n",
    "    result = 0\n",
    "    for i = 1:n\n",
    "        result += i^(-3)\n",
    "    end\n",
    "    return result\n",
    "end\n",
    "\n",
    "@time sumCubes(10^4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  0.332061 seconds (310.26 k allocations: 16.299 MiB, 54.64% gc time)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "1.2020568981600943"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#=\n",
    "(c) Use a single-line vectorised julia expression to calculate s\n",
    "=#\n",
    "@time sum(collect(1:10^4).^(-3))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  0.035755 seconds (64.15 k allocations: 3.446 MiB)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "1.2020568981600943"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#=\n",
    "(d) Single line function to sum the reciprocals of the first ten thousand cubes\n",
    "=#\n",
    "mySum(x) = sum(collect(1:x).^(-3))\n",
    "@time mySum(10^4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Summing using a for loop\n",
      "  62.296 μs (0 allocations: 0 bytes)\n",
      "\n",
      "\n",
      "Summing using a single-line vectorised expression\n",
      "  39.597 μs (4 allocations: 156.41 KiB)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "1.2020568981600943"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#=\n",
    "(e) Comparison between the speed of vectorizing as compared with writing a for loop. For loops are quicker as Julia is designed to \n",
    "    make for loops faster or as fast as vectorized code.\n",
    "=#\n",
    "using BenchmarkTools\n",
    "println(\"Summing using a for loop\")\n",
    "@btime sumCubes(10^4)\n",
    "println(\"\\n\")\n",
    "println(\"Summing using a single-line vectorised expression\")\n",
    "@btime mySum(10^4)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "$\\com{Comments/conclusions for the speed of vectorising vs loops?}$\n",
    "\n",
    "$\\com{Part 2: 4.5/5}$\n",
    "\n",
    "$\\com{Total: 9.5/10}$"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Julia 1.3.1",
   "language": "julia",
   "name": "julia-1.3"
  },
  "language_info": {
   "file_extension": ".jl",
   "mimetype": "application/julia",
   "name": "julia",
   "version": "1.3.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
